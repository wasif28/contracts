/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WonderlandZapInV1Interface extends ethers.utils.Interface {
  functions: {
    "ZapIn(address,address,uint256,uint256,address,bytes,uint256,address)": FunctionFragment;
    "ZapInLp(address,address,uint256,uint256,address,bytes,uint256,address)": FunctionFragment;
    "addPairAddress(address,address)": FunctionFragment;
    "addReserveAddress(address,address)": FunctionFragment;
    "allowedPairs(address)": FunctionFragment;
    "allowedReserves(address)": FunctionFragment;
    "approvedTargets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverLostToken(address)": FunctionFragment;
    "refundETH()": FunctionFragment;
    "removePairAddress(address)": FunctionFragment;
    "removeReserveAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedTargets(address[],bool[])": FunctionFragment;
    "stopped()": FunctionFragment;
    "toggleContractActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ZapIn",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ZapInLp",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPairAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserveAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedPairs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTargets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverLostToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePairAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReserveAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTargets",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ZapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZapInLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverLostToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReserveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddPairAddress(address,address)": EventFragment;
    "AddReserveAddress(address,address)": EventFragment;
    "ApprovedTargets(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovePairAddress(address)": EventFragment;
    "RemoveReserveAddress(address)": EventFragment;
    "zapIn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPairAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddReserveAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovedTargets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovePairAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveReserveAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "zapIn"): EventFragment;
}

export type AddPairAddressEvent = TypedEvent<
  [string, string] & { bondDepository: string; pair: string }
>;

export type AddReserveAddressEvent = TypedEvent<
  [string, string] & { bondDepository: string; reserve: string }
>;

export type ApprovedTargetsEvent = TypedEvent<
  [string, boolean] & { target: string; isApproved: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemovePairAddressEvent = TypedEvent<
  [string] & { bondDepository: string }
>;

export type RemoveReserveAddressEvent = TypedEvent<
  [string] & { bondDepository: string }
>;

export type zapInEvent = TypedEvent<
  [string, string, BigNumber] & {
    sender: string;
    pool: string;
    tokensRec: BigNumber;
  }
>;

export class WonderlandZapInV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WonderlandZapInV1Interface;

  functions: {
    ZapIn(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minReturnTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ZapInLp(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPairAddress(
      bondDepository: string,
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReserveAddress(
      bondDepository: string,
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedPairs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    allowedReserves(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverLostToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removePairAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReserveAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ZapIn(
    _FromTokenContractAddress: string,
    _bondDepository: string,
    _amount: BigNumberish,
    _minReturnTokens: BigNumberish,
    _swapTarget: string,
    swapData: BytesLike,
    _bondMaxPrice: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ZapInLp(
    _FromTokenContractAddress: string,
    _bondDepository: string,
    _amount: BigNumberish,
    _minPoolTokens: BigNumberish,
    _swapTarget: string,
    swapData: BytesLike,
    _bondMaxPrice: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPairAddress(
    bondDepository: string,
    pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReserveAddress(
    bondDepository: string,
    reserve: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedPairs(arg0: string, overrides?: CallOverrides): Promise<string>;

  allowedReserves(arg0: string, overrides?: CallOverrides): Promise<string>;

  approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverLostToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removePairAddress(
    bondDepository: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReserveAddress(
    bondDepository: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovedTargets(
    targets: string[],
    isApproved: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  toggleContractActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ZapIn(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minReturnTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ZapInLp(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPairAddress(
      bondDepository: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReserveAddress(
      bondDepository: string,
      reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedPairs(arg0: string, overrides?: CallOverrides): Promise<string>;

    allowedReserves(arg0: string, overrides?: CallOverrides): Promise<string>;

    approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverLostToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    refundETH(overrides?: CallOverrides): Promise<void>;

    removePairAddress(
      bondDepository: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReserveAddress(
      bondDepository: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPairAddress(address,address)"(
      bondDepository?: string | null,
      pair?: null
    ): TypedEventFilter<
      [string, string],
      { bondDepository: string; pair: string }
    >;

    AddPairAddress(
      bondDepository?: string | null,
      pair?: null
    ): TypedEventFilter<
      [string, string],
      { bondDepository: string; pair: string }
    >;

    "AddReserveAddress(address,address)"(
      bondDepository?: string | null,
      reserve?: null
    ): TypedEventFilter<
      [string, string],
      { bondDepository: string; reserve: string }
    >;

    AddReserveAddress(
      bondDepository?: string | null,
      reserve?: null
    ): TypedEventFilter<
      [string, string],
      { bondDepository: string; reserve: string }
    >;

    "ApprovedTargets(address,bool)"(
      target?: string | null,
      isApproved?: null
    ): TypedEventFilter<
      [string, boolean],
      { target: string; isApproved: boolean }
    >;

    ApprovedTargets(
      target?: string | null,
      isApproved?: null
    ): TypedEventFilter<
      [string, boolean],
      { target: string; isApproved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemovePairAddress(address)"(
      bondDepository?: string | null
    ): TypedEventFilter<[string], { bondDepository: string }>;

    RemovePairAddress(
      bondDepository?: string | null
    ): TypedEventFilter<[string], { bondDepository: string }>;

    "RemoveReserveAddress(address)"(
      bondDepository?: string | null
    ): TypedEventFilter<[string], { bondDepository: string }>;

    RemoveReserveAddress(
      bondDepository?: string | null
    ): TypedEventFilter<[string], { bondDepository: string }>;

    "zapIn(address,address,uint256)"(
      sender?: null,
      pool?: null,
      tokensRec?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; tokensRec: BigNumber }
    >;

    zapIn(
      sender?: null,
      pool?: null,
      tokensRec?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; pool: string; tokensRec: BigNumber }
    >;
  };

  estimateGas: {
    ZapIn(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minReturnTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ZapInLp(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPairAddress(
      bondDepository: string,
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReserveAddress(
      bondDepository: string,
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedPairs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowedReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverLostToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removePairAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReserveAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ZapIn(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minReturnTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ZapInLp(
      _FromTokenContractAddress: string,
      _bondDepository: string,
      _amount: BigNumberish,
      _minPoolTokens: BigNumberish,
      _swapTarget: string,
      swapData: BytesLike,
      _bondMaxPrice: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPairAddress(
      bondDepository: string,
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReserveAddress(
      bondDepository: string,
      reserve: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedReserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverLostToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removePairAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReserveAddress(
      bondDepository: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
